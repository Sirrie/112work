from Tkinter import *
import random
import copy
#import track as track
import Item as item
class Animation(object):
    # Override these methods when creating your own animation
    def mousePressed(self, event): pass
    def keyPressed(self, event): pass
    def mouseMotion(self,event): pass
    def timerFired(self): pass
    def init(self): pass
    def redrawAll(self): pass
    
    # Call app.run(width,height) to get your app started
    def run(self, width=300, height=300):
        # create the root and the canvas
        root = Tk()
        self.width = width
        self.height = height
        self.canvas = Canvas(root, width=width, height=height)
        self.canvas.pack()
        # set up events
        def redrawAllWrapper():
            self.canvas.delete(ALL)
            self.redrawAll()
        def mousePressedWrapper(event):
            self.mousePressed(event)
            redrawAllWrapper()
        def keyPressedWrapper(event):
            self.keyPressed(event)
            redrawAllWrapper()
        def mouseMotionWrapper(event):
            self.mouseMotion(event)
            redrawAllWrapper()
        root.bind("<Button-1>", mousePressedWrapper)
        root.bind("<Key>", keyPressedWrapper)
        root.bind("<Motion>",mouseMotionWrapper)
        # set up timerFired events
        self.timerFiredDelay = 250 # milliseconds
        def timerFiredWrapper():
            self.timerFired()
            redrawAllWrapper()
            # pause, then call timerFired again
            self.canvas.after(self.timerFiredDelay, timerFiredWrapper)
        # init and get timerFired running
        self.init()
        timerFiredWrapper()
        # and launch the app
        root.mainloop()  # This call BLOCKS (so your program waits until you close the window!)

class Game(Animation):
    def init(self):
        width = self.width
        height = self.height
        self.player=item.Player(width/2,height/2,"images/1.gif")
        # self.track=track.TrackObject()
        # # set the size of the tracking window
        # self.track.cap.set(3,width)
        # self.track.cap.set(4,hight)

        self.Enemies=[]
        self.Bullets=[]
        self.Weapans=[]

        self.isGameOver=False
        #self.areThereEnemies = False
        #self.areThereBulltes = False


        
    def mouseMotion(self,event):
        self.player.xPosition=event.x
        self.player.yPosition=event.y

    def redrawAll(self):
        self.player.drawPlayer(self.canvas)
        self.player.drawLive
        for e in self.Enemies:
            e.drawEnemy(self.canvas)
        for b in self.Bullets:
            b.drawBullets(self.canvas)


    def timerFired(self):
        if (not self.isGameOver):
            self.moveEnemies()
            self.moveBullets()
            self.addEnemy()

            self.redrawAll()

    def moveEnemies(self):
        for e in self.Enemies:
            e.moveEnemy(self.canvas,self.player.xPosition,self.player.yPosition)

    def moveBullets(self):
        for b in self.Bullets:
            b.moveWeapen(self.canvas)




game=Game()
game.run(1000,1000)